const { uuid } = require("uuidv4"); //uuid is a third party library that generates id. Ir has diiferent versions where V4 is a version that also has time stamp in it.
const { validationResult } = require("express-validator"); // contain the errors of the passed req that are generated by check function in places-routes of that particular request

const HttpError = require("../models/http-error");

let DUMMY_PLACES = [
  {
    id: "p1",
    title: "Empire State Building",
    description: "One of the most famous sky scrapers in the world!",
    location: {
      lat: 40.7484474,
      lng: -73.9871516,
    },
    address: "20 W 34th St, New York, NY 10001",
    creator: "u1",
  },
];

const getPlaceById = (req, res, next) => {
  const placeId = req.params.pid; // { pid: 'p1' }

  const place = DUMMY_PLACES.find((p) => {
    return p.id === placeId;
  });

  if (!place) {
    return next(new HttpError("Could not find a place for the provided id.", 404));
  }

  res.json({ place }); // => { place } => { place: place }
};

// function getPlaceById() { ... }
// const getPlaceById = function() { ... }

const getPlacesByUserId = (req, res, next) => {
  const userId = req.params.uid;

  const places = DUMMY_PLACES.filter((p) => {
    return p.creator === userId;
  });

  if (!places || places.length === 0) {
    return next(new HttpError("Could not find a place for the provided user id.", 404));
  }

  res.json({ places });
};

const createPlace = (req, res, next) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return next(new HttpError("Invalid Inputs Given, Please Input valid data", 422));
  }
  const { title, description, coordinates, address, creator } = req.body; //object destructutring, means | const title=req.body.title | const address = req.body.address | and so on...
  // const title = req.body.title;
  const createdPlace = {
    id: uuid(),
    title, //short form of title : title
    description,
    location: coordinates, // as coordinates is itself an object so we'll be accepting some lat, lng
    address,
    creator,
  };

  DUMMY_PLACES.push(createdPlace); //it'll add this object at the end of DUMMY_PLACES
  //To add to the start we can use unshift(createdPlace) instead of push

  res.status(201).json({ place: createdPlace }); //status 201 if something is changed
};

const updatePlace = (req, res, next) => {
  if (!validationResult(req).isEmpty()) {
    return next(new HttpError("Invalid Inputs Given, Please Input valid data", 422));
  }

  const { title, description } = req.body;
  const placeId = req.params.pid;
  if (!DUMMY_PLACES.find((p) => p.id === placeId)) {
    return next(new HttpError("Place Not Found", 401));
  }

  const updatedPlace = { ...DUMMY_PLACES.find((p) => p.id === placeId) }; //short form of an arrow function
  const placeIndex = DUMMY_PLACES.findIndex((p) => p.id === placeId);
  updatedPlace.title = title;
  updatedPlace.description = description;

  DUMMY_PLACES[placeIndex] = updatedPlace;

  res.status(200).json({ place: updatedPlace });
};

const deletePlace = (req, res, next) => {
  const placeId = req.params.pid;
  if (!DUMMY_PLACES.find((p) => p.id === placeId)) {
    return next(new HttpError("Place Not Found", 401));
  }
  DUMMY_PLACES = DUMMY_PLACES.filter((p) => p.id !== placeId);
  res.status(200).json({ message: "Place is deleted" });
};

exports.getPlaceById = getPlaceById;
exports.getPlacesByUserId = getPlacesByUserId;
exports.createPlace = createPlace;
exports.updatePlace = updatePlace;
exports.deletePlace = deletePlace;
exports.DUMMY_PLACES = DUMMY_PLACES;
